{"version":3,"sources":["components/github-corner/index.js","../../src/joy-joy/contants.js","../../src/joy-joy/index.js","effects/use-gamepads.js","effects/use-gamepad-data.js","components/joy-con/left-axes.js","components/joy-con/joy-con-left.js","components/joy-con/right-axes.js","components/joy-con/joy-con-right.js","components/joy-con/index.js","components/gamepad.js","components/joy-con/shoulder.js","components/onboarding.js","components/gamepad-list.js","app.js","serviceWorker.js","index.js"],"names":["GitHubCorner","_ref","url","react_default","a","createElement","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","left","transform","aria-hidden","d","transformOrigin","_GAMEPAD_INFO","COLORS","GRAY","BLUE","RED","GAMEPAD_IDS","LEFT_JOY_CON","RIGHT_JOY_CON","GAMEPAD_INFO","Object","defineProperty","id","name","JOYSTICK_AXES_INDEX","JOYSTICK_DIRECTIONS","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","LEFT","UP_LEFT","BUTTON_MAPPINGS","A","X","B","Y","SL","SR","MINUS","PLUS","LEFT_STICK","RIGHT_STICK","HOME","CAPTURE","TRIGGER","Z_TRIGGER","log","ulog_browser_default","WAIT_TIME","joy_joy_JOYSTICK_AXES_INDEX","joy_joy_JOYSTICK_DIRECTIONS","floatIsEqual","b","Math","abs","Number","EPSILON","gamepadConnected","onGamepadConnected","event","gamepad","key","getKey","gamepadDisconnected","onGamepadDisconnected","index","concat","getJoystickDirection","axes","direction","value","keys","forEach","pos","updateGamepad","gamepads","assign","removeGamepad","_ref2","newGamepads","useGamepads","_useState","useState","_useState2","slicedToArray","setGamepads","useEffect","_ref2$onGamepadConnec","_ref2$onGamepadDiscon","window","addEventListener","subscribeToGamepads","_ref3","_ref4","removeEventListener","useGamepadData","gamepadData","setGamepadData","stopPolling","handler","isTicking","tick","gamepadStateHandler","navigator","getGamepads","setTimeout","requestAnimationFrame","startPolling","data","CONSTANTS","ulog","DIRECTIONS","Axes","info","view","Fragment","JoyConLeft","props","buttons","toString","map","join","controllerColor","buttonColors","button","defaultColor","includes","pressed","stroke","strokeLinecap","strokeLinejoin","strokeWidth","left_axes","JoyConRight","right_axes","JoyCon","hasData","isLeft","joy_con_left","joy_con_right","Gamepad","gamepadInfo","joy_con","JoyConShoulder","filter","x","y","filterUnits","colorInterpolationFilters","floodOpacity","result","mode","in","in2","stdDeviation","Onboarding","shoulder","leftToRight","_ref$id","idA","_ref2$id","idB","localeCompare","Gamepads","length","values","sort","components_gamepad","onboarding","App","stats","level","INFO","dist_default","right","gamepad_list","Boolean","location","hostname","match","ReactDOM","render","src_app","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"mhBAKe,SAASA,EAATC,GAA+B,IAAPC,EAAOD,EAAPC,IACrC,OACEC,EAAAC,EAAAC,cAAA,KAAGC,KAAMJ,EAAKK,UAAU,gBAAgBC,aAAW,yBACjDL,EAAAC,EAAAC,cAAA,OACEI,MAAM,KACNC,OAAO,KACPC,QAAQ,cACRC,MAAO,CACLC,KAAM,UACNC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,UAAW,gBAEbC,cAAY,QAEZjB,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,sDACRlB,EAAAC,EAAAC,cAAA,QACEgB,EAAE,2LACFR,KAAK,eACLD,MAAO,CAAEU,gBAAiB,eAC1Bf,UAAU,aAEZJ,EAAAC,EAAAC,cAAA,QACEgB,EAAE,shBACFR,KAAK,eACLN,UAAU,oBC/BpBgB,gCAEOC,EAAA,CACPC,KAAA,UACAC,KAAA,UACAC,IAAA,WAEOC,EAAA,CACPC,aAAA,2CACAC,cAAA,4CAEOC,GAAAR,EAAA,GAAwCS,OAAAC,EAAA,EAAAD,CAAeT,EAAAK,EAAAC,aAAA,CAC9DK,GAAA,eACAC,KAAA,iBACIH,OAAAC,EAAA,EAAAD,CAAeT,EAAAK,EAAAE,cAAA,CACnBI,GAAA,gBACAC,KAAA,kBACCZ,GACMa,EAAA,EACAC,EAAA,CACPC,IAAA,EACAC,UAAA,kBACAC,OAAA,kBACAC,YAAA,kBACAC,KAAA,mBACAC,UAAA,kBACAC,KAAA,kBACAC,QAAA,GAEOC,EAAA,CAEPJ,KAAA,EACAF,MAAA,EACAI,KAAA,EACAN,GAAA,EACAS,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAGAC,MAAA,EACAC,KAAA,EACAC,WAAA,GACAC,YAAA,GACAC,KAAA,GACAC,QAAA,GACAC,QAAA,GACAC,UAAA,IClDAC,EAAUC,IAAI,WACdC,EAAA,GAEIC,EAAsB5B,EACtB6B,EAAsB5B,EAE1B6B,EAAA,SAAA9D,EAAA+D,GACA,OAAAC,KAAAC,IAAAjE,EAAA+D,GAAAG,OAAAC,SAGAC,EAAA,SAAAC,GACA,gBAAAC,GACA,IAAAC,EAAAD,EAAAC,QACAC,EAAAC,EAAAF,GACAd,MAAA,mBAAAe,EAAAD,GACAF,EAAA,CACAG,MACAD,cAKAG,EAAA,SAAAC,GACA,gBAAAL,GACA,IAAAC,EAAAD,EAAAC,QACAC,EAAAC,EAAAF,GACAd,MAAA,sBAAAe,EAAAD,GACAI,EAAA,CACAH,MACAD,cAMO,SAAAE,EAAA5E,GACP,IAAAiC,EAAAjC,EAAAiC,GACA8C,EAAA/E,EAAA+E,MACA,SAAAC,OAAA/C,EAAA,KAAA+C,OAAAD,GAEO,SAAAE,EAAAC,GACP,IACAC,EADAC,EAAAF,EAAmBnB,GASnB,OAPAhC,OAAAsD,KAAcrB,GAAmBsB,QAAA,SAAAX,GACjC,IAAAY,EAAcvB,EAAmBW,GAEjCV,EAAAsB,EAAAH,KACAD,EAAAR,KAGAQ,EChDA,IAAMK,EAAgB,SAAAxF,GAAA,IAAG2E,EAAH3E,EAAG2E,IAAKD,EAAR1E,EAAQ0E,QAAR,OAAsB,SAAAe,GAC1C,OAAKf,EAIe3C,OAAO2D,OAAO,GAAID,EAAlB1D,OAAAC,EAAA,EAAAD,CAAA,GACjB4C,EAAMD,IAJAe,IASLE,EAAgB,SAAAC,GAAA,IAAGjB,EAAHiB,EAAGjB,IAAKD,EAARkB,EAAQlB,QAAR,OAAsB,SAAAe,GAC1C,IAAKf,EACH,OAAOe,EAGT,IAAMI,EAAc9D,OAAO2D,OAAO,GAAID,GAEtC,cADOI,EAAYlB,GACZkB,IAsBMC,MAnBf,WAAuB,IAAAC,EACWC,mBAAS,IADpBC,EAAAlE,OAAAmE,EAAA,EAAAnE,CAAAgE,EAAA,GACdN,EADcQ,EAAA,GACJE,EADIF,EAAA,GAgBrB,OAbAG,oBAAU,WAUR,ODgBG,SAAAR,GACP,IAAAS,EAAAT,EAAApB,mBACAA,OAAA,IAAA6B,EAAA,aAA4EA,EAC5EC,EAAAV,EAAAd,sBACAA,OAAA,IAAAwB,EAAA,aAA+EA,EAC/E1C,MAAA,uBACA2C,OAAAC,iBAAA,mBAAAjC,EAAAC,IACA+B,OAAAC,iBAAA,sBAAA3B,EAAAC,IChCI2B,CAAoB,CAClBjC,mBAAoB,SAAAkC,GAAsB,IAAnB/B,EAAmB+B,EAAnB/B,IAAKD,EAAcgC,EAAdhC,QAC1ByB,EAAYX,EAAc,CAAEb,MAAKD,cAEnCI,sBAAuB,SAAA6B,GAAsB,IAAnBhC,EAAmBgC,EAAnBhC,IAAKD,EAAciC,EAAdjC,QAC7ByB,EAAYR,EAAc,CAAEhB,MAAKD,gBAI9B,kBD0BXd,MAAA,yBACA2C,OAAAK,oBAAA,mBAAArC,QACAgC,OAAAK,oBAAA,sBAAA/B,MCzBSY,GCvBMoB,MAdf,WAA0B,IAAAd,EACcC,mBAAS,IADvBC,EAAAlE,OAAAmE,EAAA,EAAAnE,CAAAgE,EAAA,GACjBe,EADiBb,EAAA,GACJc,EADId,EAAA,GAWxB,OARAG,oBAAU,WAAM,IACNY,EF4DL,SAAAC,GACP,IAAAC,GAAA,EA0BA,OAzBAtD,MAAA,gBAcAsD,IACAtD,MAAA,qBACAsD,GAAA,EAdA,SAAAC,EAAAC,GACAF,IACAE,EAAAC,UAAAC,eAEAC,WAAA,WACAhB,OAAAiB,sBAAA,WACA,OAAAL,EAAAC,MAEOtD,IAOPqD,CAAAF,IAQA,CACAD,YANA,WACApD,MAAA,eACAsD,GAAA,IEpF4BO,CAAa,SAAAC,GACnCX,EAAeW,KADTV,YAIR,OAAO,kBAAMA,OAGRF,GCVD3E,EAAwBwF,EAAxBxF,oBAEFyB,EAAMgE,IAAK,QAGXC,EAAa,CACjBxF,GACEnC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mEACFR,KAAK,UAGT0B,SACEpC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mEACFR,KAAK,UAGT2B,MAAOrC,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,wCAAwCR,KAAK,UAC5D4B,WACEtC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,UAGT6B,KACEvC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,+DACFR,KAAK,UAGT8B,UACExC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,UAGT+B,KAAMzC,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,6CAA6CR,KAAK,UAChEgC,QACE1C,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mEACFR,KAAK,WAYIkH,MAPf,SAAA9H,GAA+B,IAAf+E,EAAe/E,EAAf+E,MAAOG,EAAQlF,EAARkF,KACfC,EAAYF,EAAqBC,GACvCtB,EAAImE,KAAJ,KAAA/C,OAAcD,GAASI,EAAWD,EAAK/C,IACvC,IAAM6F,EAAOH,EAAW1C,GACxB,OAAS6C,GAAc9H,EAAAC,EAAAC,cAACF,EAAAC,EAAM8H,SAAP,OCjDnBrE,EAAMgE,IAAK,gBAGf/E,EAEE8E,EAFF9E,gBACUpB,EACRkG,EADFpG,OAAUE,KA0MGyG,EA9LI,SAAAC,GAAS,IAClBpD,EAAyBoD,EAAzBpD,MAAOqD,EAAkBD,EAAlBC,QAASlD,EAASiD,EAATjD,KACxBtB,EAAImE,KAAJ,KAAA/C,OACOD,EAAMsD,YACXD,EAAQE,IAAI,SAAAtI,GAAA,OAAAA,EAAGoF,QAAmBmD,KAAK,MAGzC,IAAMC,EAAkB/G,EAElBgH,EAAe,GAYrB,OAXA1G,OAAOsD,KAAKxC,GAAiByC,QAAQ,SAAAX,GACnC,IAAMI,EAAQlC,EAAgB8B,GACxB+D,EAASN,EAAQrD,GACjB4D,EAAe,CAAC,KAAM,MAAMC,SAASjE,GACvC6D,EAvBc,UA0BlBC,EAAa9D,GACT+D,GAAUA,EAAOG,QA1BJ,UA0B6BF,IAI9CzI,EAAAC,EAAAC,cAAA,MAAA2B,OAAA2D,OAAA,CAAKlF,MAAO,IAAKC,OAAQ,IAAKC,QAAQ,cAAcE,KAAK,QAAWuH,GAClEjI,EAAAC,EAAAC,cAAA,QACEgB,EAAE,8LACFR,KAAM6H,EAAa9E,UACnBmF,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wLACFR,KAAM6H,EAAa/E,QACnBoF,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mcACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wOACFR,KAAM4H,EACNM,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oJACFR,KAAM6H,EAAatF,GACnB2F,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,2JACFR,KAAM6H,EAAavF,GACnB4F,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oDACFR,KAAM6H,EAAarF,MACnB0F,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oPACFR,KAAM6H,EAAahF,QACnBqF,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gZACFR,KAAK,QACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4YACFR,KAAM6H,EAAapG,GACnByG,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gZACFR,KAAM6H,EAAahG,KACnBqG,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gZACFR,KAAM6H,EAAalG,MACnBuG,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4YACFR,KAAM6H,EAAa9F,KACnBmG,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,sZACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,sZACFR,KAAM6H,EAAanF,WACnBwF,OAAO,QACPG,YAAa,MACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,yUACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,uWACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,sWACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4TACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAC8I,EAAD,CAAMnE,MAAOA,EAAOG,KAAMA,MC1MxB/C,EAAwBwF,EAAxBxF,oBAEFyB,EAAMgE,IAAK,QAGXC,EAAa,CACjBxF,GACEnC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,+DACFR,KAAK,UAGT0B,SACEpC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,UAGT2B,MAAOrC,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,+CAA+CR,KAAK,UACnE4B,WACEtC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,UAGT6B,KACEvC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mEACFR,KAAK,UAGT8B,UACExC,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,UAGT+B,KAAMzC,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,wCAAwCR,KAAK,UAC3DgC,QACE1C,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oEACFR,KAAK,WAYIkH,MAPf,SAAA9H,GAA+B,IAAf+E,EAAe/E,EAAf+E,MAAOG,EAAQlF,EAARkF,KACfC,EAAYF,EAAqBC,GACvCtB,EAAImE,KAAJ,KAAA/C,OAAcD,GAASI,EAAWD,EAAK/C,IACvC,IAAM6F,EAAOH,EAAW1C,GACxB,OAAS6C,GAAc9H,EAAAC,EAAAC,cAACF,EAAAC,EAAM8H,SAAP,OCjDnBrE,EAAMgE,IAAK,gBAGf/E,EAEE8E,EAFF9E,gBACUnB,EACRiG,EADFpG,OAAUG,IAiMGyH,EArLK,SAAAhB,GAAS,IACnBpD,EAAyBoD,EAAzBpD,MAAOqD,EAAkBD,EAAlBC,QAASlD,EAASiD,EAATjD,KACxBtB,EAAImE,KAAJ,KAAA/C,OACOD,EAAMsD,YACXD,EAAQE,IAAI,SAAAtI,GAAA,OAAAA,EAAGoF,QAAmBmD,KAAK,MAGzC,IAAMC,EAAkB9G,EAElB+G,EAAe,GAYrB,OAXA1G,OAAOsD,KAAKxC,GAAiByC,QAAQ,SAAAX,GACnC,IAAMI,EAAQlC,EAAgB8B,GACxB+D,EAASN,EAAQrD,GACjB4D,EAAe,CAAC,KAAM,MAAMC,SAASjE,GACvC6D,EAvBc,UA0BlBC,EAAa9D,GACT+D,GAAUA,EAAOG,QA1BJ,UA0B6BF,IAI9CzI,EAAAC,EAAAC,cAAA,MAAA2B,OAAA2D,OAAA,CAAKlF,MAAO,IAAKC,OAAQ,IAAKC,QAAQ,cAAcE,KAAK,QAAWuH,GAClEjI,EAAAC,EAAAC,cAAA,QACEgB,EAAE,6LACFR,KAAM6H,EAAa9E,UACnBmF,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4LACFR,KAAM6H,EAAa/E,QACnBoF,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kcACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4PACFR,KAAM4H,EACNM,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,iIACFR,KAAM6H,EAAatF,GACnB2F,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kIACFR,KAAM6H,EAAavF,GACnB4F,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,2HACFR,KAAM6H,EAAapF,KACnByF,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wYACFR,KAAK,UACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kZACFR,KAAM6H,EAAajF,KACnBsF,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4UACFR,KAAK,QACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,8YACFR,KAAM6H,EAAa1F,EACnB+F,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,uyBACFR,KAAK,YAEPV,EAAAC,EAAAC,cAAA,QACEgB,EAAE,iZACFR,KAAM6H,EAAa3F,EACnBgG,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0oBACFR,KAAK,YAEPV,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gZACFR,KAAM6H,EAAazF,EACnB8F,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,uwCACFR,KAAK,YAEPV,EAAAC,EAAAC,cAAA,QACEgB,EAAE,+YACFR,KAAM6H,EAAaxF,EACnB6F,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,2aACFR,KAAK,YAEPV,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wZACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,qYACFR,KAAM6H,EAAalF,YACnBuF,OAAO,QACPG,YAAa,MACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mUACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wVACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,uWACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gUACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,OACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAACgJ,EAAD,CAAMrE,MAAOA,EAAOG,KAAMA,MC/LxBvD,EAAgBgG,EAAhBhG,YAiBO0H,GAfA,SAAArJ,GAAkC,IAA/BiC,EAA+BjC,EAA/BiC,GAAI8C,EAA2B/E,EAA3B+E,MAAOqD,EAAoBpI,EAApBoI,QAASlD,EAAWlF,EAAXkF,KAC9BoE,IAAYlB,KAAalD,EACzBqE,EAAS5H,EAAYC,eAAiBK,EAE5C,OAAOqH,EACLC,EACErJ,EAAAC,EAAAC,cAACoJ,EAAD,CAAYzE,MAAOA,EAAOqD,QAASA,EAASlD,KAAMA,IAElDhF,EAAAC,EAAAC,cAACqJ,EAAD,CAAa1E,MAAOA,EAAOqD,QAASA,EAASlD,KAAMA,IAGrDhF,EAAAC,EAAAC,cAACF,EAAAC,EAAM8H,SAAP,OCdInG,GAAiB6F,EAAjB7F,aAqBO4H,OAnBf,SAAA1J,GAA8B,IAAX0E,EAAW1E,EAAX0E,QACXoC,EAAcD,IAEZ5E,EAAcyC,EAAdzC,GAAI8C,EAAUL,EAAVK,MAHgBa,EAIFkB,EAAY/B,IAAU,GAAxCG,EAJoBU,EAIpBV,KAAMkD,EAJcxC,EAIdwC,QACRuB,EAAc7H,GAAaG,GAC3BC,EAAOyH,EAAcA,EAAYzH,KAAOD,EAE9C,OACE/B,EAAAC,EAAAC,cAACF,EAAAC,EAAM8H,SAAP,KACE/H,EAAAC,EAAAC,cAAA,UACG8B,EACDhC,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBAAhB,IAAkCyE,IAEpC7E,EAAAC,EAAAC,cAACwJ,GAAD,CAAQ3H,GAAIA,EAAI8C,MAAOA,EAAOG,KAAMA,EAAMkD,QAASA,MCoM1CyB,GAxNQ,SAAA1B,GAAK,OAC1BjI,EAAAC,EAAAC,cAAA,MAAA2B,OAAA2D,OAAA,CACEpF,UAAU,mBACVE,MAAO,IACPC,OAAQ,IACRC,QAAQ,cACRE,KAAK,QACDuH,GAEJjI,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gLACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mEACF0H,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,yOACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,yZACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,yOACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0OACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0LACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0OACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,yOACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,2MACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,mRACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0QACFR,KAAK,UACLkI,OAAO,UAET5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,0DACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,4DACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,2BAA2B0H,OAAO,UAC1C5I,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,2BAA2B0H,OAAO,UAC1C5I,EAAAC,EAAAC,cAAA,KAAG0J,OAAO,mBACR5J,EAAAC,EAAAC,cAAA,QAAMgB,EAAE,2BAA2B0H,OAAO,WAE5C5I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,gPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,wkCACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,SACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,i0DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,SACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,kPACFR,KAAK,UACLkI,OAAO,QACPC,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,27DACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,SACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEgB,EAAE,oHACFR,KAAK,QACLkI,OAAO,QACPG,YAAa,SACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,QACEE,UAAU,oBACVc,EAAE,kZACFR,KAAK,UACLkI,OAAO,QACPG,YAAa,QACbF,cAAc,QACdC,eAAe,UAEjB9I,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACE6B,GAAG,YACH8H,EAAG,QACHC,EAAG,QACHxJ,MAAO,KACPC,OAAQ,IACRwJ,YAAY,iBACZC,0BAA0B,QAE1BhK,EAAAC,EAAAC,cAAA,WAAS+J,aAAc,EAAGC,OAAO,uBACjClK,EAAAC,EAAAC,cAAA,WACEiK,KAAK,SACLC,GAAG,gBACHC,IAAI,qBACJH,OAAO,UAETlK,EAAAC,EAAAC,cAAA,kBAAgBoK,aAAc,IAAMJ,OAAO,+BC7LpCK,GAnBI,SAAAtC,GACjB,OACEjI,EAAAC,EAAAC,cAAA,WAASE,UAAU,cACjBJ,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACWF,EAAAC,EAAAC,cAAA,kBADX,qEAIAF,EAAAC,EAAAC,cAAA,mFAGAF,EAAAC,EAAAC,cAAA,iDAEFF,EAAAC,EAAAC,cAACsK,GAAD,QCXAC,GAAc,SAAA3K,EAAA4F,GAAwC,IAAAgF,EAAA5K,EAArCiC,GAAI4I,OAAiC,IAAAD,EAA3B,GAA2BA,EAAAE,EAAAlF,EAAnB3D,GAAI8I,OAAe,IAAAD,EAAT,GAASA,EAC1D,OAAOD,EAAIG,cAAcD,IA0BZE,OAvBf,WACE,IAAMxF,EAAWK,IAmBjB,OAjBsBL,GAAc1D,OAAOsD,KAAKI,GAAUyF,OAExDhL,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBACXyB,OAAOoJ,OAAO1F,GACZ2F,KAAKT,IACLrC,IAAI,SAAA5D,GAAW,IACNK,EAAUL,EAAVK,MACR,OACE7E,EAAAC,EAAAC,cAAA,MAAIuE,IAAKI,EAAOzE,UAAU,WACxBJ,EAAAC,EAAAC,cAACiL,GAAD,CAAS3G,QAASA,QAM5BxE,EAAAC,EAAAC,cAACkL,GAAD,OCpBE1H,GAAMgE,IAAK,OAwBF2D,OAtBf,WACE,IAAMC,EAAQ5H,GAAI6H,OAAS7H,GAAI8H,KAAOxL,EAAAC,EAAAC,cAACuL,EAAAxL,EAAD,CAAUc,KAAK,OAAO2K,MAAM,MAAS,GAE3E,OACE1L,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACL,EAAD,CAAcE,IAAI,uCACjBuL,EACDtL,EAAAC,EAAAC,cAAA,WAASE,UAAU,QACjBJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,yCAAR,WADJ,6CAMFH,EAAAC,EAAAC,cAACyL,GAAD,SCfYC,QACW,cAA7BvF,OAAOwF,SAASC,UAEe,UAA7BzF,OAAOwF,SAASC,UAEhBzF,OAAOwF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjM,EAAAC,EAAAC,cAACgM,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBjF,WACrBA,UAAUkF,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.60e7e9ab.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\n// Derived from http://tholman.com/github-corners/\nexport default function GitHubCorner({ url }) {\n  return (\n    <a href={url} className=\"github-corner\" aria-label=\"View source on GitHub\">\n      <svg\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        style={{\n          fill: '#151513',\n          color: '#fff',\n          position: 'absolute',\n          top: 0,\n          border: 0,\n          left: 0,\n          transform: 'scale(-1, 1)'\n        }}\n        aria-hidden=\"true\"\n      >\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"currentColor\"\n          style={{ transformOrigin: '130px 106px' }}\n          className=\"octo-arm\"\n        />\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"currentColor\"\n          className=\"octo-body\"\n        />\n      </svg>\n    </a>\n  );\n}\n","import _defineProperty from \"/home/circleci/project/build-node-8/demo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _GAMEPAD_INFO;\n\nexport var COLORS = {\n  GRAY: '#747474',\n  BLUE: '#00BBDB',\n  RED: '#FF5F53'\n};\nexport var GAMEPAD_IDS = {\n  LEFT_JOY_CON: 'Joy-Con (L) (Vendor: 057e Product: 2006)',\n  RIGHT_JOY_CON: 'Joy-Con (R) (Vendor: 057e Product: 2007)'\n};\nexport var GAMEPAD_INFO = (_GAMEPAD_INFO = {}, _defineProperty(_GAMEPAD_INFO, GAMEPAD_IDS.LEFT_JOY_CON, {\n  id: 'left-joy-con',\n  name: 'Left Joy-Con'\n}), _defineProperty(_GAMEPAD_INFO, GAMEPAD_IDS.RIGHT_JOY_CON, {\n  id: 'right-joy-con',\n  name: 'Right Joy-Con'\n}), _GAMEPAD_INFO);\nexport var JOYSTICK_AXES_INDEX = 9;\nexport var JOYSTICK_DIRECTIONS = {\n  UP: -1,\n  UP_RIGHT: -0.7142857313156128,\n  RIGHT: -0.4285714030265808,\n  DOWN_RIGHT: -0.1428571343421936,\n  DOWN: 0.14285719394683838,\n  DOWN_LEFT: 0.4285714626312256,\n  LEFT: 0.7142857313156128,\n  UP_LEFT: 1\n};\nexport var BUTTON_MAPPINGS = {\n  // NOTE: directions are from the sideways view\n  DOWN: 0,\n  RIGHT: 1,\n  LEFT: 2,\n  UP: 3,\n  A: 0,\n  X: 1,\n  B: 2,\n  Y: 3,\n  SL: 4,\n  SR: 5,\n  // undefined: 6,\n  // undefined: 7,\n  MINUS: 8,\n  PLUS: 9,\n  LEFT_STICK: 10,\n  RIGHT_STICK: 11,\n  HOME: 12,\n  CAPTURE: 13,\n  TRIGGER: 14,\n  Z_TRIGGER: 15 // undefined: 16\n\n};","import ulog from 'ulog';\nimport * as CONSTANTS from './contants';\nvar log = ulog('joy-joy');\nvar WAIT_TIME = 16; // 60fps\n\nvar JOYSTICK_AXES_INDEX = CONSTANTS.JOYSTICK_AXES_INDEX,\n    JOYSTICK_DIRECTIONS = CONSTANTS.JOYSTICK_DIRECTIONS;\n\nvar floatIsEqual = function floatIsEqual(a, b) {\n  return Math.abs(a - b) < Number.EPSILON;\n};\n\nvar gamepadConnected = function gamepadConnected(onGamepadConnected) {\n  return function (event) {\n    var gamepad = event.gamepad;\n    var key = getKey(gamepad);\n    log.log('gamepadConnected', key, gamepad);\n    onGamepadConnected({\n      key: key,\n      gamepad: gamepad\n    });\n  };\n};\n\nvar gamepadDisconnected = function gamepadDisconnected(onGamepadDisconnected) {\n  return function (event) {\n    var gamepad = event.gamepad;\n    var key = getKey(gamepad);\n    log.log('gamepadDisconnected', key, gamepad);\n    onGamepadDisconnected({\n      key: key,\n      gamepad: gamepad\n    });\n  };\n};\n\nexport { CONSTANTS };\nexport function getKey(_ref) {\n  var id = _ref.id,\n      index = _ref.index;\n  return \"\".concat(id, \"#\").concat(index);\n}\nexport function getJoystickDirection(axes) {\n  var value = axes[JOYSTICK_AXES_INDEX];\n  var direction;\n  Object.keys(JOYSTICK_DIRECTIONS).forEach(function (key) {\n    var pos = JOYSTICK_DIRECTIONS[key];\n\n    if (floatIsEqual(pos, value)) {\n      direction = key;\n    }\n  });\n  return direction;\n}\nexport function subscribeToGamepads(_ref2) {\n  var _ref2$onGamepadConnec = _ref2.onGamepadConnected,\n      onGamepadConnected = _ref2$onGamepadConnec === void 0 ? function () {} : _ref2$onGamepadConnec,\n      _ref2$onGamepadDiscon = _ref2.onGamepadDisconnected,\n      onGamepadDisconnected = _ref2$onGamepadDiscon === void 0 ? function () {} : _ref2$onGamepadDiscon;\n  log.log('subscribeToGamepads');\n  window.addEventListener('gamepadconnected', gamepadConnected(onGamepadConnected));\n  window.addEventListener('gamepaddisconnected', gamepadDisconnected(onGamepadDisconnected));\n}\nexport function unsubscribeFromGamepads() {\n  log.log('unsubscribeToGamepads');\n  window.removeEventListener('gamepadconnected', gamepadConnected);\n  window.removeEventListener('gamepaddisconnected', gamepadDisconnected);\n}\nexport function startPolling(handler) {\n  var isTicking = false;\n  log.log('startPolling');\n\n  var tick = function tick(gamepadStateHandler) {\n    if (isTicking) {\n      gamepadStateHandler(navigator.getGamepads()); // Keep ticking\n\n      setTimeout(function () {\n        window.requestAnimationFrame(function () {\n          return tick(gamepadStateHandler);\n        });\n      }, WAIT_TIME);\n    }\n  };\n\n  if (!isTicking) {\n    log.log('startPolling init');\n    isTicking = true;\n    tick(handler);\n  }\n\n  var stopPolling = function stopPolling() {\n    log.log('stopPolling');\n    isTicking = false;\n  };\n\n  return {\n    stopPolling: stopPolling\n  };\n}","import { useState, useEffect } from 'react';\n\nimport { subscribeToGamepads, unsubscribeFromGamepads } from 'joy-joy';\n\nconst updateGamepad = ({ key, gamepad }) => gamepads => {\n  if (!gamepad) {\n    return gamepads;\n  }\n\n  const newGamepads = Object.assign({}, gamepads, {\n    [key]: gamepad\n  });\n  return newGamepads;\n};\n\nconst removeGamepad = ({ key, gamepad }) => gamepads => {\n  if (!gamepad) {\n    return gamepads;\n  }\n\n  const newGamepads = Object.assign({}, gamepads);\n  delete newGamepads[key];\n  return newGamepads;\n};\n\nfunction useGamepads() {\n  const [gamepads, setGamepads] = useState({});\n\n  useEffect(() => {\n    subscribeToGamepads({\n      onGamepadConnected: ({ key, gamepad }) => {\n        setGamepads(updateGamepad({ key, gamepad }));\n      },\n      onGamepadDisconnected: ({ key, gamepad }) => {\n        setGamepads(removeGamepad({ key, gamepad }));\n      }\n    });\n\n    return () => unsubscribeFromGamepads();\n  });\n\n  return gamepads;\n}\n\nexport default useGamepads;\n","import { useState, useEffect } from 'react';\n\nimport { startPolling } from 'joy-joy';\n\nfunction useGamepadData() {\n  const [gamepadData, setGamepadData] = useState({});\n\n  useEffect(() => {\n    const { stopPolling } = startPolling(data => {\n      setGamepadData(data);\n    });\n\n    return () => stopPolling();\n  });\n\n  return gamepadData;\n}\n\nexport default useGamepadData;\n","import React from 'react';\nimport ulog from 'ulog';\n\nimport { getJoystickDirection, CONSTANTS } from 'joy-joy';\n\nconst { JOYSTICK_AXES_INDEX } = CONSTANTS;\n\nconst log = ulog('axes');\n\n// NOTE: Direction is relative to the side view of the controller\nconst DIRECTIONS = {\n  UP: (\n    <path\n      d=\"M104.173 126.133L96.5231 137.29L96.8245 114.775L104.173 126.133Z\"\n      fill=\"white\"\n    />\n  ),\n  UP_RIGHT: (\n    <path\n      d=\"M94.2634 148.263L96.921 134.999L80.9993 150.921L94.2634 148.263Z\"\n      fill=\"white\"\n    />\n  ),\n  RIGHT: <path d=\"M73 157L84.2583 149.5H61.7417L73 157Z\" fill=\"white\" />,\n  DOWN_RIGHT: (\n    <path\n      d=\"M52.1924 148.263L49.5348 134.999L65.4565 150.921L52.1924 148.263Z\"\n      fill=\"white\"\n    />\n  ),\n  DOWN: (\n    <path\n      d=\"M42.5834 126.5L50.2334 137.657L49.932 115.142L42.5834 126.5Z\"\n      fill=\"white\"\n    />\n  ),\n  DOWN_LEFT: (\n    <path\n      d=\"M51.1924 105.192L48.5348 118.457L64.4565 102.535L51.1924 105.192Z\"\n      fill=\"white\"\n    />\n  ),\n  LEFT: <path d=\"M73.2417 96L84.5 103.5H61.9833L73.2417 96Z\" fill=\"white\" />,\n  UP_LEFT: (\n    <path\n      d=\"M95.2634 105.192L97.921 118.457L81.9993 102.535L95.2634 105.192Z\"\n      fill=\"white\"\n    />\n  )\n};\n\nfunction Axes({ index, axes }) {\n  const direction = getJoystickDirection(axes);\n  log.info(`L#${index}`, direction, axes[JOYSTICK_AXES_INDEX]);\n  const view = DIRECTIONS[direction];\n  return !!view ? view : <React.Fragment />;\n}\n\nexport default Axes;\n","import React from 'react';\nimport ulog from 'ulog';\n\nimport { CONSTANTS } from 'joy-joy';\nimport Axes from './left-axes';\n\nconst log = ulog('joy-con-left');\n\nconst {\n  BUTTON_MAPPINGS,\n  COLORS: { BLUE }\n} = CONSTANTS;\n\nconst DEFAULT_COLOR = '#44484C';\nconst ACTIVE_COLOR = '#FCFCFC';\n\n/**\n * JoyCon Left SVG\n *\n * Based off https://commons.wikimedia.org/wiki/File:Nintendo_Switch_Joy-Con_illustration.svg\n * Generated from https://github.com/smooth-code/svgr\n */\nconst JoyConLeft = props => {\n  const { index, buttons, axes } = props;\n  log.info(\n    `L#${index.toString()}`,\n    buttons.map(({ value }) => value).join(' ')\n  );\n\n  const controllerColor = BLUE;\n\n  const buttonColors = {};\n  Object.keys(BUTTON_MAPPINGS).forEach(key => {\n    const index = BUTTON_MAPPINGS[key];\n    const button = buttons[index];\n    const defaultColor = ['SL', 'SR'].includes(key)\n      ? controllerColor\n      : DEFAULT_COLOR;\n\n    buttonColors[key] =\n      !!button && button.pressed ? ACTIVE_COLOR : defaultColor;\n  });\n\n  return (\n    <svg width={153} height={437} viewBox=\"0 0 153 437\" fill=\"none\" {...props}>\n      <path\n        d=\"M114 24.0904V4.96019C114 3.08634 112.774 1.00008 111.463 1.00008H73.9913C35.3111 1.00008 13.085 49.6946 7.1515 84.2562C6.88082 85.8329 6.78375 89.0001 8.54459 89.0001H12.9983L114 24.0904Z\"\n        fill={buttonColors.Z_TRIGGER}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M114.47 19.8438V15.6562C114.47 14.3994 113.186 13 111.814 13H85.5639C45.0703 13 8.82405 45.6619 2.6124 68.8441C2.32903 69.9017 2.22741 72.0261 4.0708 72.0261H8.73329L114.47 19.8438Z\"\n        fill={buttonColors.TRIGGER}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M150.335 41.2449H136.325V376.844H142.88V390.781C142.88 392.339 144.188 394.966 145.296 394.966H150.177C151.072 394.966 151.879 394.275 151.879 393.264V328.021C151.879 319.402 146.49 319.296 146.49 316.575V281.971C146.49 279.515 151.749 278.911 151.749 271.894V157.343C151.749 150.388 146.49 149.92 146.49 147.267L146.615 113.237C146.615 110.893 151.874 109.088 151.874 102.852L151.871 43.0458C151.88 42.0641 151.397 41.2449 150.335 41.2449H150.335Z\"\n        fill=\"#44484C\"\n        stroke=\"black\"\n      />\n      <path\n        d=\"M137.512 21.3826V434.07C137.512 435.094 137.006 435.867 135.715 435.867H86.0749C34.3954 435.867 1 390.169 1 350.792V102.851C1 44.9663 57.7644 18.1324 85.7189 18.1324H134.51C136.996 18.1324 137.512 19.5004 137.512 21.3826V21.3826Z\"\n        fill={controllerColor}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M149.804 316.693H145.606V282.178H149.716C151.151 282.178 151.881 283.179 151.881 284.343V314.881C151.881 315.986 151.073 316.693 149.804 316.693Z\"\n        fill={buttonColors.SR}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M149.804 112.928H145.606V147.443H149.716C151.151 147.443 151.881 146.442 151.881 145.278V114.74C151.881 113.635 151.073 112.928 149.804 112.928V112.928Z\"\n        fill={buttonColors.SL}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M126.451 56.4688H104.264V62.8438H126.451V56.4688Z\"\n        fill={buttonColors.MINUS}\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M105.764 311.344H86.7638C84.8998 311.344 83.3888 312.855 83.3888 314.719V333.094C83.3888 334.958 84.8998 336.469 86.7638 336.469H105.764C107.628 336.469 109.139 334.958 109.139 333.094V314.719C109.139 312.855 107.628 311.344 105.764 311.344Z\"\n        fill={buttonColors.CAPTURE}\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M105.014 324.125C105.014 326.47 104.082 328.72 102.424 330.378C100.765 332.037 98.5156 332.969 96.17 332.969C93.8245 332.969 91.5751 332.037 89.9166 330.378C88.258 328.72 87.3263 326.47 87.3263 324.125C87.3263 321.779 88.258 319.53 89.9166 317.871C91.5751 316.213 93.8245 315.281 96.17 315.281C98.5156 315.281 100.765 316.213 102.424 317.871C104.082 319.53 105.014 321.779 105.014 324.125V324.125Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M104.519 259.507C100.501 259.507 96.6477 257.91 93.8065 255.069C90.9652 252.228 89.369 248.374 89.369 244.356C89.369 240.338 90.9652 236.485 93.8065 233.643C96.6477 230.802 100.501 229.206 104.519 229.206C108.538 229.206 112.391 230.802 115.232 233.643C118.074 236.485 119.67 240.338 119.67 244.356C119.67 248.374 118.074 252.228 115.232 255.069C112.391 257.91 108.538 259.507 104.519 259.507Z\"\n        fill={buttonColors.UP}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M100.483 250.725V238.049L111.461 244.387L100.483 250.725Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.904694}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M41.8899 259.507C37.8717 259.507 34.0182 257.91 31.1769 255.069C28.3357 252.228 26.7395 248.374 26.7395 244.356C26.7395 240.338 28.3357 236.485 31.1769 233.643C34.0182 230.802 37.8717 229.206 41.8899 229.206C45.908 229.206 49.7616 230.802 52.6028 233.643C55.4441 236.485 57.0403 240.338 57.0403 244.356C57.0403 248.374 55.4441 252.228 52.6028 255.069C49.7616 257.91 45.908 259.507 41.8899 259.507Z\"\n        fill={buttonColors.DOWN}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M46.0856 250.725V238.049L35.1078 244.387L46.0856 250.725Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.904694}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M88.355 275.671C88.355 279.689 86.7588 283.543 83.9175 286.384C81.0763 289.225 77.2227 290.821 73.2046 290.821C69.1865 290.821 65.3329 289.225 62.4916 286.384C59.6504 283.543 58.0542 279.689 58.0542 275.671C58.0542 271.653 59.6504 267.799 62.4916 264.958C65.3329 262.117 69.1865 260.521 73.2046 260.521C77.2227 260.521 81.0763 262.117 83.9175 264.958C86.7588 267.799 88.355 271.653 88.355 275.671Z\"\n        fill={buttonColors.RIGHT}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M79.5234 271.758H66.8474L73.1854 282.736L79.5234 271.758Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.904694}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M88.355 213.042C88.355 217.06 86.7588 220.913 83.9175 223.755C81.0763 226.596 77.2227 228.192 73.2046 228.192C69.1865 228.192 65.3329 226.596 62.4916 223.755C59.6504 220.913 58.0542 217.06 58.0542 213.042C58.0542 209.023 59.6504 205.17 62.4916 202.329C65.3329 199.487 69.1865 197.891 73.2046 197.891C77.2227 197.891 81.0763 199.487 83.9175 202.329C86.7588 205.17 88.355 209.023 88.355 213.042Z\"\n        fill={buttonColors.LEFT}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M79.5234 217.361H66.8474L73.1854 206.383L79.5234 217.361Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.904694}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M105.389 126.469C105.389 134.972 102.011 143.127 95.9979 149.14C89.985 155.153 81.8298 158.531 73.3263 158.531C64.8228 158.531 56.6676 155.153 50.6547 149.14C44.6418 143.127 41.2638 134.972 41.2638 126.469C41.2638 117.965 44.6418 109.81 50.6547 103.797C56.6676 97.7842 64.8228 94.4062 73.3263 94.4062C81.8298 94.4062 89.985 97.7842 95.9979 103.797C102.011 109.81 105.389 117.965 105.389 126.469V126.469Z\"\n        fill=\"#44484C\"\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M95.8104 126.691C95.8104 132.654 93.4416 138.373 89.225 142.59C85.0084 146.806 79.2894 149.175 73.3263 149.175C67.3631 149.175 61.6442 146.806 57.4276 142.59C53.211 138.373 50.8421 132.654 50.8421 126.691C50.8421 120.728 53.211 115.009 57.4276 110.792C61.6442 106.576 67.3631 104.207 73.3263 104.207C79.2894 104.207 85.0084 106.576 89.225 110.792C93.4416 115.009 95.8104 120.728 95.8104 126.691V126.691Z\"\n        fill={buttonColors.LEFT_STICK}\n        stroke=\"black\"\n        strokeWidth={1.426}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M72.1645 100.355C72.1647 98.21 72.1705 96.9426 72.1803 96.8745C72.2102 96.6678 72.3118 96.4702 72.4695 96.3126C72.9447 95.8374 73.7528 95.9783 74.0459 96.5876C74.1557 96.816 74.1481 96.5391 74.1483 100.305L74.1486 103.707L73.4471 103.707C73.0613 103.706 72.6149 103.711 72.4549 103.717L72.1642 103.728L72.1645 100.355V100.355Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M73.0449 156.776C72.6554 156.732 72.3202 156.443 72.1976 156.044C72.1732 155.965 72.1708 155.714 72.1665 152.805L72.1615 149.651L72.3923 149.664C72.5192 149.671 72.966 149.677 73.385 149.677H74.147L74.143 152.833L74.139 155.989L74.1043 156.091C73.9998 156.396 73.7586 156.636 73.4529 156.738C73.3531 156.772 73.1636 156.789 73.0448 156.776L73.0449 156.776Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M96.311 126.759C96.311 126.404 96.305 125.958 96.2983 125.766L96.2856 125.419L99.5171 125.422L102.748 125.427L102.863 125.468C103.294 125.626 103.562 126.023 103.533 126.462C103.517 126.706 103.421 126.92 103.252 127.093C103.119 127.229 102.995 127.301 102.764 127.375C102.714 127.391 102.053 127.396 99.5063 127.399L96.311 127.404V126.759L96.311 126.759Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M43.6391 127.387C43.4241 127.359 43.2141 127.25 43.0609 127.088C42.5282 126.525 42.7969 125.626 43.5532 125.441C43.6237 125.424 44.2423 125.42 47.003 125.419L50.3669 125.419L50.3546 125.751C50.3476 125.934 50.3423 126.38 50.3423 126.743V127.403L47.0376 127.401C45.22 127.4 43.6907 127.393 43.6391 127.387H43.6391Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <Axes index={index} axes={axes} />\n    </svg>\n  );\n};\n\nexport default JoyConLeft;\n","import React from 'react';\nimport ulog from 'ulog';\n\nimport { getJoystickDirection, CONSTANTS } from 'joy-joy';\n\nconst { JOYSTICK_AXES_INDEX } = CONSTANTS;\n\nconst log = ulog('axes');\n\n// NOTE: Direction is relative to the side view of the controller\nconst DIRECTIONS = {\n  UP: (\n    <path\n      d=\"M48.5834 240.5L56.2334 251.657L55.932 229.142L48.5834 240.5Z\"\n      fill=\"white\"\n    />\n  ),\n  UP_RIGHT: (\n    <path\n      d=\"M57.1924 219.192L54.5348 232.457L70.4565 216.535L57.1924 219.192Z\"\n      fill=\"white\"\n    />\n  ),\n  RIGHT: <path d=\"M79.2417 210L90.5 217.5H67.9833L79.2417 210Z\" fill=\"white\" />,\n  DOWN_RIGHT: (\n    <path\n      d=\"M101.263 219.192L103.921 232.457L87.9993 216.535L101.263 219.192Z\"\n      fill=\"white\"\n    />\n  ),\n  DOWN: (\n    <path\n      d=\"M110.173 240.133L102.523 251.29L102.825 228.775L110.173 240.133Z\"\n      fill=\"white\"\n    />\n  ),\n  DOWN_LEFT: (\n    <path\n      d=\"M100.263 262.263L102.921 248.999L86.9993 264.921L100.263 262.263Z\"\n      fill=\"white\"\n    />\n  ),\n  LEFT: <path d=\"M79 271L90.2583 263.5H67.7417L79 271Z\" fill=\"white\" />,\n  UP_LEFT: (\n    <path\n      d=\"M58.1924 262.263L55.5348 248.999L71.4565 264.921L58.1924 262.263Z\"\n      fill=\"white\"\n    />\n  )\n};\n\nfunction Axes({ index, axes }) {\n  const direction = getJoystickDirection(axes);\n  log.info(`R#${index}`, direction, axes[JOYSTICK_AXES_INDEX]);\n  const view = DIRECTIONS[direction];\n  return !!view ? view : <React.Fragment />;\n}\n\nexport default Axes;\n","import React from 'react';\nimport ulog from 'ulog';\n\nimport { CONSTANTS } from 'joy-joy';\nimport Axes from './right-axes';\n\nconst log = ulog('joy-con-left');\n\nconst {\n  BUTTON_MAPPINGS,\n  COLORS: { RED }\n} = CONSTANTS;\n\nconst DEFAULT_COLOR = '#44484C';\nconst ACTIVE_COLOR = '#FCFCFC';\n\n/**\n * JoyCon Right SVG\n *\n * Based off https://commons.wikimedia.org/wiki/File:Nintendo_Switch_Joy-Con_illustration.svg\n * Generated from https://github.com/smooth-code/svgr\n */\nconst JoyConRight = props => {\n  const { index, buttons, axes } = props;\n  log.info(\n    `R#${index.toString()}`,\n    buttons.map(({ value }) => value).join(' ')\n  );\n\n  const controllerColor = RED;\n\n  const buttonColors = {};\n  Object.keys(BUTTON_MAPPINGS).forEach(key => {\n    const index = BUTTON_MAPPINGS[key];\n    const button = buttons[index];\n    const defaultColor = ['SL', 'SR'].includes(key)\n      ? controllerColor\n      : DEFAULT_COLOR;\n\n    buttonColors[key] =\n      !!button && button.pressed ? ACTIVE_COLOR : defaultColor;\n  });\n\n  return (\n    <svg width={153} height={437} viewBox=\"0 0 153 437\" fill=\"none\" {...props}>\n      <path\n        d=\"M37 24.0904V4.96019C37 3.08634 38.2263 1.00008 39.5373 1.00008H77.0087C115.689 1.00008 137.915 49.6946 143.849 84.2562C144.119 85.8329 144.216 89.0001 142.455 89.0001H138.002L37 24.0904Z\"\n        fill={buttonColors.Z_TRIGGER}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M38.0324 19.8438V15.6562C38.0324 14.3994 39.3162 13 40.6887 13H66.9387C107.432 13 143.678 45.6619 149.89 68.8441C150.173 69.9017 150.275 72.0261 148.432 72.0261H143.769L38.0324 19.8438Z\"\n        fill={buttonColors.TRIGGER}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M2.54675 41.2448H16.5563V376.844H10.0012V390.781C10.0012 392.339 8.69302 394.966 7.58502 394.966H2.70428C1.80898 394.966 1.00244 394.275 1.00244 393.264V328.021C1.00244 319.402 6.39166 319.296 6.39166 316.574V281.97C6.39166 279.515 1.13257 278.911 1.13257 271.894V157.343C1.13257 150.388 6.39166 149.92 6.39166 147.267L6.26666 113.237C6.26666 110.893 1.00757 109.088 1.00757 102.851V43.0457C0.997568 42.064 1.48177 41.2448 2.54327 41.2448H2.54675Z\"\n        fill=\"#44484C\"\n        stroke=\"black\"\n      />\n      <path\n        d=\"M15.1887 21.9999V434.687C15.1887 435.711 15.6945 436.484 16.9855 436.484H66.6262C118.306 436.484 151.701 390.787 151.701 351.409V103.469C151.701 45.5836 94.9367 18.7498 66.9821 18.7498H18.1915C15.7054 18.7498 15.1887 20.1177 15.1887 21.9999V21.9999Z\"\n        fill={controllerColor}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M3.07709 112.928H7.27557V147.443H3.16547C1.72997 147.443 1 146.442 1 145.278V114.74C1 113.635 1.80849 112.928 3.07709 112.928Z\"\n        fill={buttonColors.SR}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M3.07709 316.693H7.27557V282.178H3.16547C1.72997 282.178 1 283.179 1 284.343V314.881C1 315.986 1.80849 316.693 3.07709 316.693Z\"\n        fill={buttonColors.SL}\n        stroke=\"black\"\n      />\n      <path\n        d=\"M26.4684 56.4666H34.0761V48.9536H40.3896V56.4982H47.871V62.8116H40.4212V70.6088H34.0131V62.8116H26.4999L26.4684 56.4666Z\"\n        fill={buttonColors.PLUS}\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M73.0093 318.264C73.0093 322.727 71.2361 327.008 68.08 330.164C64.9238 333.32 60.6432 335.093 56.1798 335.093C51.7163 335.093 47.4357 333.32 44.2795 330.164C41.1234 327.008 39.3503 322.727 39.3503 318.264C39.3503 313.8 41.1234 309.52 44.2795 306.364C47.4357 303.207 51.7163 301.434 56.1798 301.434C60.6432 301.434 64.9238 303.207 68.08 306.364C71.2361 309.52 73.0093 313.8 73.0093 318.264Z\"\n        fill=\"#999595\"\n        stroke=\"black\"\n        strokeWidth={0.742744}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M68.7489 318.417C68.7489 321.75 67.4247 324.947 65.0675 327.305C62.7103 329.662 59.5133 330.986 56.1797 330.986C52.8461 330.986 49.6491 329.662 47.2919 327.305C44.9347 324.947 43.6104 321.75 43.6104 318.417C43.6104 315.083 44.9347 311.886 47.2919 309.529C49.6491 307.172 52.8461 305.848 56.1797 305.848C59.5133 305.848 62.7103 307.172 65.0675 309.529C67.4247 311.886 68.7489 315.083 68.7489 318.417Z\"\n        fill={buttonColors.HOME}\n        stroke=\"black\"\n        strokeWidth={0.99449}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M47.3384 317.747H49.8223V325.565C53.9863 325.565 58.6396 325.565 62.4245 325.565V317.747H64.9083C62.1718 315.202 58.4889 311.727 56.1234 309.564C53.2605 312.195 50.243 315.035 47.3384 317.747V317.747ZM53.1951 317.878C55.1326 317.878 57.2956 317.878 59.0517 317.878V322.872C57.1162 322.872 54.9537 322.872 53.1951 322.872V317.878Z\"\n        fill=\"black\"\n        stroke=\"black\"\n      />\n      <path\n        d=\"M94.0892 92.5059C94.0892 96.524 92.493 100.378 89.6517 103.219C86.8105 106.06 82.9569 107.656 78.9388 107.656C74.9207 107.656 71.0671 106.06 68.2258 103.219C65.3846 100.378 63.7884 96.524 63.7884 92.5059C63.7884 88.4877 65.3846 84.6342 68.2258 81.7929C71.0671 78.9517 74.9207 77.3555 78.9388 77.3555C82.9569 77.3555 86.8105 78.9517 89.6517 81.7929C92.493 84.6342 94.0892 88.4877 94.0892 92.5059Z\"\n        fill={buttonColors.X}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M71.6209 100.614C71.6209 100.603 72.8506 98.7186 74.3536 96.4238L77.0862 92.251L74.6644 88.5101C73.3324 86.4526 72.2119 84.7257 72.1746 84.6727L72.1066 84.5767H73.9808H75.8549L77.4617 87.1533C78.3455 88.5705 79.084 89.7247 79.1028 89.7184C79.1218 89.7074 79.8409 88.5566 80.7012 87.1506L82.2653 84.5941L84.1115 84.5831C85.1269 84.5721 85.9578 84.5831 85.9578 84.5941C85.9578 84.6051 84.8447 86.3502 83.4841 88.4744C82.068 90.6855 81.0167 92.3606 81.0251 92.3928C81.0351 92.4238 82.2568 94.2809 83.7442 96.52C85.2316 98.759 86.4485 100.6 86.4485 100.611C86.4485 100.622 85.585 100.63 84.5294 100.63H82.6102L80.8262 97.8423C79.3855 95.5906 79.0341 95.0631 78.9993 95.1006C78.9753 95.1256 78.1636 96.3813 77.1951 97.89L75.4341 100.633H73.5275C72.4788 100.633 71.6207 100.622 71.6207 100.616L71.6209 100.614Z\"\n        fill=\"#bbbbbb\"\n      />\n      <path\n        d=\"M110.253 138.971C106.235 138.971 102.382 137.375 99.5405 134.533C96.6993 131.692 95.1031 127.839 95.1031 123.821C95.1031 119.802 96.6993 115.949 99.5405 113.108C102.382 110.266 106.235 108.67 110.253 108.67C114.272 108.67 118.125 110.266 120.966 113.108C123.808 115.949 125.404 119.802 125.404 123.821C125.404 127.839 123.808 131.692 120.966 134.533C118.125 137.375 114.272 138.971 110.253 138.971Z\"\n        fill={buttonColors.A}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M102.589 131.693C102.649 131.533 108.655 116.115 108.731 115.924L108.818 115.705H110.51H112.201L115.398 123.686C117.156 128.075 118.603 131.686 118.613 131.711C118.627 131.746 118.277 131.753 116.885 131.745L115.14 131.735L114.437 129.904L113.734 128.073L110.511 128.083L107.287 128.093L106.623 129.924L105.958 131.755H104.262C102.661 131.755 102.567 131.745 102.589 131.694L102.589 131.693ZM112.692 125.368C112.682 125.344 112.182 123.995 111.578 122.37C110.975 120.746 110.471 119.429 110.459 119.444C110.442 119.464 109.152 122.992 108.294 125.368C108.281 125.402 108.736 125.411 110.493 125.411C112.251 125.411 112.705 125.401 112.692 125.368Z\"\n        fill=\"#bbbbbb\"\n      />\n      <path\n        d=\"M94.0892 155.135C94.0892 159.153 92.493 163.007 89.6517 165.848C86.8105 168.69 82.9569 170.286 78.9388 170.286C74.9207 170.286 71.0671 168.69 68.2258 165.848C65.3846 163.007 63.7884 159.153 63.7884 155.135C63.7884 151.117 65.3846 147.264 68.2258 144.422C71.0671 141.581 74.9207 139.985 78.9388 139.985C82.9569 139.985 86.8105 141.581 89.6517 144.422C92.493 147.264 94.0892 151.117 94.0892 155.135Z\"\n        fill={buttonColors.B}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M72.9946 155.48V147.47L76.9543 147.487C80.9022 147.504 81.3284 147.517 82.1201 147.637C83.3214 147.819 84.3075 148.433 84.9583 149.404C85.9477 150.879 85.788 152.804 84.569 154.096C84.2848 154.398 84.0125 154.609 83.6332 154.821L83.3388 154.986L83.5773 155.065C84.1588 155.257 84.7739 155.609 85.1868 155.987C85.6714 156.431 86.0888 157.135 86.2702 157.814C86.3532 158.124 86.3622 158.223 86.3652 158.805C86.3652 159.31 86.3541 159.515 86.3041 159.741C86.1021 160.66 85.6569 161.514 85.0659 162.116C84.3095 162.887 83.3817 163.278 82.0565 163.385C81.3964 163.438 78.1811 163.488 75.3806 163.489H72.9943V155.479L72.9946 155.48ZM80.9783 160.763C81.718 160.702 82.1124 160.551 82.5032 160.183C82.9073 159.801 83.0747 159.361 83.0734 158.683C83.0734 157.637 82.5053 156.905 81.5213 156.675C80.9514 156.541 80.6169 156.523 78.3878 156.507L76.2112 156.491V158.644V160.798H78.3878C79.5848 160.798 80.7505 160.782 80.9783 160.763V160.763ZM79.6901 153.842C80.8574 153.809 81.0912 153.775 81.512 153.576C81.9522 153.367 82.2623 153.02 82.4088 152.573C82.509 152.267 82.5088 151.643 82.4078 151.332C82.2191 150.749 81.786 150.373 81.1204 150.215C80.9128 150.166 80.5498 150.156 78.545 150.143L76.2111 150.129V152.003V153.876H77.4261C78.0944 153.876 79.1131 153.861 79.69 153.845L79.6901 153.842Z\"\n        fill=\"#bbbbbb\"\n      />\n      <path\n        d=\"M47.6239 138.971C43.6058 138.971 39.7522 137.375 36.911 134.533C34.0697 131.692 32.4735 127.839 32.4735 123.821C32.4735 119.802 34.0697 115.949 36.911 113.108C39.7522 110.266 43.6058 108.67 47.6239 108.67C51.6421 108.67 55.4956 110.266 58.3369 113.108C61.1781 115.949 62.7744 119.802 62.7744 123.821C62.7744 127.839 61.1781 131.692 58.3369 134.533C55.4956 137.375 51.6421 138.971 47.6239 138.971Z\"\n        fill={buttonColors.Y}\n        stroke=\"black\"\n        strokeWidth={0.82506}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M46.0966 128.695V125.326L43.1837 120.72C41.5815 118.188 40.2706 116.109 40.2706 116.101C40.2706 116.091 41.1065 116.087 42.1282 116.087L43.986 116.087L45.8698 119.259C47.2709 121.618 47.7637 122.42 47.7923 122.39C47.8133 122.368 48.651 120.94 49.6534 119.218L51.4758 116.087H53.308H55.1403L55.0903 116.166C55.0623 116.209 53.7422 118.294 52.1558 120.8L49.2715 125.356V128.711V132.065H47.6841H46.0969V128.696L46.0966 128.695Z\"\n        fill=\"#bbbbbb\"\n      />\n      <path\n        d=\"M111.189 240.094C111.189 248.597 107.811 256.752 101.798 262.765C95.785 268.778 87.6298 272.156 79.1263 272.156C70.6228 272.156 62.4676 268.778 56.4547 262.765C50.4418 256.752 47.0638 248.597 47.0638 240.094C47.0638 231.59 50.4418 223.435 56.4547 217.422C62.4676 211.409 70.6228 208.031 79.1263 208.031C87.6298 208.031 95.785 211.409 101.798 217.422C107.811 223.435 111.189 231.59 111.189 240.094V240.094Z\"\n        fill=\"#44484C\"\n        stroke=\"black\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M101.61 240.316C101.61 246.279 99.2415 251.998 95.0249 256.215C90.8083 260.431 85.0894 262.8 79.1262 262.8C73.163 262.8 67.4441 260.431 63.2275 256.215C59.0109 251.998 56.642 246.279 56.642 240.316C56.642 234.353 59.0109 228.634 63.2275 224.417C67.4441 220.201 73.163 217.832 79.1262 217.832C85.0894 217.832 90.8083 220.201 95.0249 224.417C99.2415 228.634 101.61 234.353 101.61 240.316Z\"\n        fill={buttonColors.RIGHT_STICK}\n        stroke=\"black\"\n        strokeWidth={1.426}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M77.9644 213.98C77.9646 211.835 77.9744 210.568 77.9804 210.5C78.0104 210.293 78.112 210.095 78.2696 209.938C78.7448 209.462 79.553 209.603 79.846 210.213C79.9558 210.441 79.9481 210.164 79.9484 213.93L79.9487 217.332L79.2473 217.332C78.8615 217.331 78.415 217.336 78.2551 217.342L77.9643 217.353L77.9645 213.98H77.9644Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M78.8448 270.401C78.4554 270.357 78.1201 270.068 77.9975 269.669C77.9735 269.59 77.9705 269.339 77.9665 266.43L77.9565 263.276L78.1873 263.289C78.3143 263.296 78.761 263.302 79.1801 263.302H79.942V266.458V269.614L79.9069 269.716C79.8025 270.021 79.5614 270.261 79.2557 270.363C79.1557 270.397 78.9663 270.414 78.8476 270.401L78.8448 270.401Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M102.111 240.384C102.111 240.029 102.101 239.583 102.098 239.391L102.085 239.044L105.316 239.047L108.548 239.052L108.662 239.093C109.094 239.251 109.361 239.648 109.332 240.087C109.316 240.331 109.221 240.545 109.051 240.718C108.919 240.854 108.794 240.926 108.563 241C108.513 241.016 107.852 241.021 105.306 241.024L102.11 241.029V240.384L102.111 240.384Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M49.439 241.012C49.2239 240.984 49.014 240.875 48.8609 240.713C48.3281 240.15 48.5969 239.251 49.3531 239.066C49.4241 239.049 50.0422 239.045 52.8029 239.044L56.1668 239.044L56.1547 239.376C56.1447 239.559 56.1428 240.005 56.1428 240.368V241.028L52.8381 241.026C51.0205 241.025 49.4911 241.018 49.4396 241.012H49.439Z\"\n        fill=\"black\"\n        stroke=\"black\"\n        strokeWidth={0.03125}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <Axes index={index} axes={axes} />\n    </svg>\n  );\n};\n\nexport default JoyConRight;\n","import React from 'react';\n\nimport { CONSTANTS } from 'joy-joy';\n\nimport JoyConLeft from './joy-con-left';\nimport JoyConRight from './joy-con-right';\n\nconst { GAMEPAD_IDS } = CONSTANTS;\n\nconst JoyCon = ({ id, index, buttons, axes }) => {\n  const hasData = !!buttons && !!axes;\n  const isLeft = GAMEPAD_IDS.LEFT_JOY_CON === id;\n\n  return hasData ? (\n    isLeft ? (\n      <JoyConLeft index={index} buttons={buttons} axes={axes} />\n    ) : (\n      <JoyConRight index={index} buttons={buttons} axes={axes} />\n    )\n  ) : (\n    <React.Fragment />\n  );\n};\n\nexport default JoyCon;\n","import React from 'react';\nimport { CONSTANTS } from 'joy-joy';\n\nimport useGamepadData from '../effects/use-gamepad-data';\nimport JoyCon from './joy-con';\n\nconst { GAMEPAD_INFO } = CONSTANTS;\n\nfunction Gamepad({ gamepad }) {\n  const gamepadData = useGamepadData();\n\n  const { id, index } = gamepad;\n  const { axes, buttons } = gamepadData[index] || {};\n  const gamepadInfo = GAMEPAD_INFO[id];\n  const name = gamepadInfo ? gamepadInfo.name : id;\n\n  return (\n    <React.Fragment>\n      <h3>\n        {name}\n        <span className=\"gamepad-index\">#{index}</span>\n      </h3>\n      <JoyCon id={id} index={index} axes={axes} buttons={buttons} />\n    </React.Fragment>\n  );\n}\n\nexport default Gamepad;\n","import React from 'react';\n\nconst JoyConShoulder = props => (\n  <svg\n    className=\"joy-con-shoulder\"\n    width={500}\n    height={121}\n    viewBox=\"0 0 500 121\"\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      d=\"M11.4299 44.3987C11.4299 34.3315 20.6696 18.2084 21.8597 5.50781C21.8597 2.81802 24.57 1 26.6327 1H35.6483C38.6411 1 40.8984 5.33102 43.5149 5.33102V39.1838L11.4299 44.3987Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M34.3563 1.16187C34.3563 19.8913 28.4813 23.3025 28.4813 28.2869\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M7.05466 57.1708C7.05466 57.1708 6.91991 78.2433 7.05466 78.2072C7.18941 78.1711 2.8562 78.2072 2.8562 78.2072C1.72854 78.2072 1.00006 77.3716 1.00006 76.3511L1.00006 59.1595C1.00006 57.9426 2.08835 57.1708 2.9888 57.1708H7.05466Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M94.5638 89.6951C95.3431 92.4946 100.722 97.7264 106.094 98.9448C106.094 100.538 105.158 102.746 103.221 102.746H84.748C80.8574 102.746 81.8364 115.4 88.1388 115.4H94.5149C107.762 120.844 119.593 120.955 132.522 115.4H139.239C145.092 115.4 146.297 102.861 142.599 102.861H124.479C121.851 102.861 120.621 101.023 120.775 99.1573C125.491 97.2041 129.702 94.6449 132.08 89.885V88.1173H94.5481L94.5638 89.6951Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M298.411 71.0735V94.8235C298.411 95.3758 298.859 95.8235 299.411 95.8235H322.536C323.088 95.8235 323.536 95.3758 323.536 94.8235V71.0735C323.536 70.5212 323.088 70.0735 322.536 70.0735H299.411C298.859 70.0735 298.411 70.5212 298.411 71.0735Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M277.492 89.7132C277.492 89.89 277.492 94.0442 277.492 94.0442C277.492 95.8523 276.388 96.5633 274.973 96.5633C267.346 97.2359 258.08 97.1964 250.268 96.5633C248.955 96.5633 247.668 95.3153 247.683 93.9779V88.6968H277.492V89.7132Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M43.536 73.8858V94.1288C43.536 94.6657 43.9713 95.101 44.5082 95.101H48.9387C49.4757 95.101 49.911 94.6657 49.911 94.1288V73.8858C49.911 73.3488 49.4757 72.9135 48.9387 72.9135H44.5082C43.9713 72.9135 43.536 73.3488 43.536 73.8858Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M65.4813 26.0369V33.0369H46.7313V25.9119C46.7313 24.9908 47.5368 24.5751 48.2625 24.3806C53.4988 22.9776 59.1353 23.0487 64.1063 24.3806C64.89 24.5906 65.4813 25.1166 65.4813 26.0369Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M214.913 89.7132C214.913 89.89 214.913 94.0442 214.913 94.0442C214.913 95.8523 213.809 96.5633 212.394 96.5633C204.767 97.2359 195.501 97.1964 187.689 96.5633C186.376 96.5633 185.089 95.3153 185.104 93.9779V88.6968H214.913V89.7132Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M246.202 89.7132C246.202 89.89 246.202 94.0442 246.202 94.0442C246.202 95.8523 245.099 96.5633 243.683 96.5633C236.056 97.2359 226.79 97.1964 218.979 96.5633C217.666 96.5633 216.379 95.3153 216.393 93.9779V88.6968H246.202V89.7132Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M96.4813 32.4744C77.2512 32.4744 63.56 8.95172 45.7938 1.09937C44.0879 0.642295 42.1063 1.99138 42.1063 3.66187V13.5994C42.1063 28.9519 24.4605 25.7892 16.6063 36.0369L96.5037 36.0369L96.4813 32.4744Z\"\n      fill=\"#747474\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M5.94977 53.8562L5.94977 75.4496C5.94977 83.7304 14.0806 89.3883 21.5061 89.3883L408.47 89.3883C417.185 89.3883 423.761 82.4193 423.761 74.0971V54.5633C423.761 42.3226 411.212 31.6265 400.825 31.6265L28.2236 31.6265C16.9976 31.6265 5.94977 44.4987 5.94977 53.8562V53.8562Z\"\n      fill=\"#747474\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M28.3791 75.8445L28.3791 45.7292C28.3791 43.373 30.2892 41.4629 32.6454 41.4629L377.465 41.4629C379.821 41.4629 381.731 43.373 381.731 45.7292V75.8445C381.731 78.2007 379.821 80.1108 377.465 80.1108L32.6454 80.1108C30.2892 80.1108 28.3791 78.2007 28.3791 75.8445Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n    />\n    <path\n      d=\"M316.606 71.3955V49.9281C316.606 47.5719 318.516 45.6618 320.873 45.6618H373.465C375.821 45.6618 377.731 47.5719 377.731 49.9281V71.3955C377.731 73.7517 375.821 75.6618 373.465 75.6618H320.873C318.516 75.6618 316.606 73.7517 316.606 71.3955Z\"\n      fill=\"#2E2F31\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M374.12 60.5992L358.506 51.5847V69.6138L374.12 60.5992Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M355.432 60.5992L339.819 51.5847V69.6138L355.432 60.5992Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M336.745 60.5992L321.131 51.5847V69.6138L336.745 60.5992Z\"\n      fill=\"#44484C\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M161.481 62.2705V58.9281C161.481 57.8145 162.384 56.9118 163.498 56.9118H166.84C167.953 56.9118 168.856 57.8145 168.856 58.9281V62.2705C168.856 63.3841 167.953 64.2868 166.84 64.2868H163.498C162.384 64.2868 161.481 63.3841 161.481 62.2705Z\"\n      fill=\"#AAEEFF\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M177.856 62.2705V58.9281C177.856 57.8145 178.759 56.9118 179.873 56.9118H183.215C184.328 56.9118 185.231 57.8145 185.231 58.9281V62.2705C185.231 63.3841 184.328 64.2868 183.215 64.2868H179.873C178.759 64.2868 177.856 63.3841 177.856 62.2705Z\"\n      fill=\"#AAEEFF\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M194.606 62.2705V58.9281C194.606 57.8145 195.509 56.9118 196.623 56.9118H199.965C201.078 56.9118 201.981 57.8145 201.981 58.9281V62.2705C201.981 63.3841 201.078 64.2868 199.965 64.2868H196.623C195.509 64.2868 194.606 63.3841 194.606 62.2705Z\"\n      fill=\"#AAEEFF\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M210.981 62.2705V58.9281C210.981 57.8145 211.884 56.9118 212.998 56.9118H216.34C217.453 56.9118 218.356 57.8145 218.356 58.9281V62.2705C218.356 63.3841 217.453 64.2868 216.34 64.2868H212.998C211.884 64.2868 210.981 63.3841 210.981 62.2705Z\"\n      fill=\"#AAEEFF\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path d=\"M103.439 102.695H122.814\" stroke=\"black\" />\n    <path d=\"M105.942 98.8643H121.326\" stroke=\"black\" />\n    <g filter=\"url(#filter0_f)\">\n      <path d=\"M94.6263 115.414H132.626\" stroke=\"black\" />\n    </g>\n    <path\n      d=\"M268.731 62.8955V58.5531C268.731 55.5756 271.089 53.1618 273.998 53.1618H298.59C301.498 53.1618 303.856 55.5756 303.856 58.5531V62.8955C303.856 65.873 301.498 68.2868 298.59 68.2868H273.998C271.089 68.2868 268.731 65.873 268.731 62.8955Z\"\n      fill=\"#999595\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M286.025 60.4848V56.1589L287.914 56.1592C288.953 56.1593 289.962 56.1662 290.156 56.1725C291.426 56.2189 291.98 56.3919 292.46 56.8917C292.993 57.4476 293.215 58.3019 293.045 59.1504C292.95 59.6231 292.713 60.0391 292.357 60.3566C292.03 60.6483 291.504 60.8764 290.948 60.9682C290.824 60.9885 290.811 60.9933 290.834 61.0091C290.848 61.0191 290.95 61.0866 291.06 61.1596C291.523 61.4657 291.787 61.7267 292.161 62.2477C292.377 62.55 292.474 62.7004 293.188 63.8403L293.791 64.8041L292.76 64.8071C291.947 64.8091 291.727 64.807 291.714 64.7938C291.705 64.7848 291.362 64.2745 290.95 63.6604C289.761 61.8865 289.613 61.6856 289.337 61.4753C289.063 61.2667 288.843 61.215 288.182 61.2036L287.764 61.1967V63.0036V64.8105H286.895H286.025V60.4848ZM289.943 59.8091C290.227 59.7933 290.478 59.7651 290.587 59.7368C290.914 59.6512 291.171 59.3964 291.268 59.0603C291.304 58.9349 291.319 58.6169 291.295 58.4778C291.238 58.1403 291.068 57.9053 290.779 57.7632C290.502 57.6268 290.374 57.6173 288.817 57.6168L287.764 57.6165V58.7197V59.8229L288.73 59.8229C289.261 59.8229 289.807 59.8158 289.943 59.8091Z\"\n      fill=\"black\"\n      stroke=\"black\"\n      strokeWidth={0.0133722}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M281.409 64.9679C280.087 64.8637 279.237 64.3999 278.701 63.4898C278.485 63.1246 278.295 62.5349 278.244 62.0736L278.235 61.9908L278.28 61.9828C278.364 61.9684 279.929 61.8208 279.935 61.8266C279.938 61.8296 279.953 61.893 279.969 61.9672C279.985 62.0414 280.023 62.175 280.052 62.2643C280.282 62.9559 280.715 63.338 281.411 63.4629C281.623 63.5011 282.089 63.5045 282.314 63.469C282.613 63.422 282.841 63.3446 283.02 63.2288C283.266 63.0699 283.45 62.8473 283.534 62.6085C283.582 62.4734 283.595 62.2023 283.561 62.0679C283.495 61.8041 283.336 61.6316 283.013 61.4741C282.787 61.3635 282.53 61.2863 281.562 61.0396C280.681 60.8149 280.324 60.6938 279.89 60.4723C279.475 60.2608 279.149 59.972 278.908 59.603C278.652 59.2105 278.533 58.7649 278.553 58.274C278.57 57.851 278.7 57.4588 278.94 57.102C279.116 56.8396 279.302 56.6548 279.57 56.4751C280.116 56.1089 280.838 55.9272 281.747 55.9274C282.76 55.9276 283.528 56.1314 284.095 56.5505C284.241 56.6588 284.472 56.8892 284.58 57.0358C284.873 57.4317 285.035 57.8768 285.081 58.4091C285.088 58.4908 285.091 58.5593 285.089 58.5614C285.083 58.5674 283.344 58.6437 283.339 58.6388C283.336 58.6358 283.323 58.581 283.309 58.5152C283.228 58.1441 283.065 57.8456 282.853 57.6786C282.689 57.5494 282.476 57.4621 282.205 57.413C281.988 57.3738 281.499 57.37 281.271 57.406C280.912 57.4621 280.619 57.5859 280.429 57.762C280.227 57.9487 280.169 58.2698 280.29 58.5282C280.345 58.6456 280.478 58.7842 280.615 58.867C280.87 59.0203 281.308 59.1668 282.106 59.3645C283.068 59.6031 283.616 59.7843 284.026 60.0002C284.691 60.3497 285.137 60.9297 285.278 61.6277C285.328 61.8807 285.343 62.0686 285.335 62.3574C285.329 62.5604 285.32 62.6507 285.293 62.7782C285.144 63.4822 284.728 64.0889 284.148 64.4499C283.739 64.704 283.218 64.8665 282.566 64.9434C282.391 64.964 281.579 64.981 281.409 64.9676L281.409 64.9679Z\"\n      fill=\"black\"\n      stroke=\"black\"\n      strokeWidth={0.0135255}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M99.8963 62.8955V58.5531C99.8963 55.5756 102.254 53.1618 105.163 53.1618H129.755C132.664 53.1618 135.021 55.5756 135.021 58.5531V62.8955C135.021 65.873 132.664 68.2868 129.755 68.2868H105.163C102.254 68.2868 99.8963 65.873 99.8963 62.8955Z\"\n      fill=\"#999595\"\n      stroke=\"black\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M112.913 65.0731C111.904 65.0117 111.144 64.7124 110.609 64.1657C110.211 63.7587 109.931 63.2013 109.797 62.5486C109.766 62.3994 109.722 62.1288 109.728 62.1248C109.73 62.1248 110.089 62.0888 110.526 62.0469C110.964 62.0051 111.345 61.9676 111.372 61.9636C111.416 61.9566 111.422 61.9596 111.422 61.9835C111.422 62.0304 111.474 62.2392 111.524 62.393C111.762 63.1249 112.243 63.516 113.013 63.6041C113.19 63.6244 113.644 63.6131 113.809 63.5844C114.245 63.5088 114.566 63.338 114.782 63.0684C114.951 62.8578 115.012 62.6859 115.012 62.4197C115.012 62.23 114.988 62.1243 114.916 61.9985C114.866 61.912 114.747 61.7922 114.643 61.7228C114.394 61.5574 114.146 61.4763 112.994 61.1825C112.273 60.9989 111.93 60.889 111.556 60.7225C111.05 60.497 110.683 60.1987 110.409 59.7902C110.258 59.5651 110.138 59.2751 110.082 58.9995C110.055 58.8685 110.052 58.8102 110.052 58.5418C110.052 58.2758 110.056 58.2166 110.082 58.1037C110.229 57.4432 110.642 56.889 111.228 56.5643C111.491 56.4184 111.832 56.2968 112.169 56.2283C112.91 56.0779 113.892 56.108 114.585 56.3025C114.904 56.3922 115.237 56.5461 115.474 56.7133C115.637 56.8283 115.922 57.1141 116.039 57.2782C116.225 57.5409 116.374 57.886 116.442 58.211C116.477 58.3753 116.504 58.5851 116.504 58.6883V58.749L116.427 58.7491C116.384 58.7492 116.016 58.7642 115.608 58.7825C115.199 58.8009 114.844 58.8159 114.818 58.8159H114.771L114.747 58.6989C114.694 58.4366 114.577 58.1744 114.444 58.0152C114.183 57.7052 113.799 57.5722 113.163 57.5724C112.745 57.5724 112.457 57.6287 112.178 57.7656C111.853 57.9244 111.721 58.0959 111.706 58.3763C111.695 58.585 111.745 58.7295 111.878 58.8752C112.091 59.1083 112.482 59.2625 113.528 59.5258C114.342 59.7307 114.652 59.823 115.053 59.9803C115.764 60.2598 116.22 60.6458 116.496 61.2028C116.661 61.536 116.734 61.8429 116.753 62.2859C116.775 62.8119 116.649 63.2951 116.37 63.7568C116.058 64.2729 115.575 64.6421 114.937 64.8528C114.38 65.0365 113.64 65.1171 112.913 65.0729L112.913 65.0731Z\"\n      fill=\"black\"\n      stroke=\"black\"\n      strokeWidth={0.0133722}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M119.049 60.6024V56.2608H119.928H120.807V59.8721V63.4834H123.005H125.203V64.2138V64.9442H122.126H119.049V60.6024Z\"\n      fill=\"black\"\n      stroke=\"black\"\n      strokeWidth={0.0135255}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      className=\"sync-button flash\"\n      d=\"M239.346 66.4603C240.924 66.4603 242.437 65.8333 243.553 64.7174C244.669 63.6015 245.296 62.088 245.296 60.5098C245.296 58.9316 244.669 57.4181 243.553 56.3022C242.437 55.1862 240.924 54.5593 239.346 54.5593C237.768 54.5593 236.254 55.1862 235.138 56.3022C234.022 57.4181 233.395 58.9316 233.395 60.5098C233.395 62.088 234.022 63.6015 235.138 64.7174C236.254 65.8333 237.768 66.4603 239.346 66.4603Z\"\n      fill=\"#2E2F31\"\n      stroke=\"black\"\n      strokeWidth={2.10067}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <defs>\n      <filter\n        id=\"filter0_f\"\n        x={92.7263}\n        y={113.014}\n        width={41.8}\n        height={4.8}\n        filterUnits=\"userSpaceOnUse\"\n        colorInterpolationFilters=\"sRGB\"\n      >\n        <feFlood floodOpacity={0} result=\"BackgroundImageFix\" />\n        <feBlend\n          mode=\"normal\"\n          in=\"SourceGraphic\"\n          in2=\"BackgroundImageFix\"\n          result=\"shape\"\n        />\n        <feGaussianBlur stdDeviation={0.95} result=\"effect1_foregroundBlur\" />\n      </filter>\n    </defs>\n  </svg>\n);\n\nexport default JoyConShoulder;\n","import React from 'react';\n\nimport JoyConShoulder from './joy-con/shoulder';\n\nconst Onboarding = props => {\n  return (\n    <section className=\"onboarding\">\n      <p>To connect a Joy-Con:</p>\n      <ol>\n        <li>\n          Hold the <em>SYNC</em> button on the Joy-Con controller until the\n          lights start flashing\n        </li>\n        <li>\n          Connect the controller to your computer using your Bluetooth settings\n        </li>\n        <li>Once connected, press some buttons</li>\n      </ol>\n      <JoyConShoulder />\n    </section>\n  );\n};\n\nexport default Onboarding;\n","import React from 'react';\n\nimport useGamepads from '../effects/use-gamepads';\nimport Gamepad from './gamepad';\n\nimport Onboarding from './onboarding';\n\nconst leftToRight = ({ id: idA = '' }, { id: idB = '' }) => {\n  return idA.localeCompare(idB);\n};\n\nfunction Gamepads() {\n  const gamepads = useGamepads();\n\n  const hasGamepads = !!gamepads && !!Object.keys(gamepads).length;\n  const gamepadElems = hasGamepads ? (\n    <ul className=\"gamepad-list\">\n      {Object.values(gamepads)\n        .sort(leftToRight)\n        .map(gamepad => {\n          const { index } = gamepad;\n          return (\n            <li key={index} className=\"gamepad\">\n              <Gamepad gamepad={gamepad} />\n            </li>\n          );\n        })}\n    </ul>\n  ) : (\n    <Onboarding />\n  );\n  return gamepadElems;\n}\n\nexport default Gamepads;\n","import React from 'react';\nimport ulog from 'ulog';\nimport FPSStats from 'react-fps-stats';\n\nimport './app.css';\n\nimport GitHubCorner from './components/github-corner';\nimport GamepadList from './components/gamepad-list';\n\nconst log = ulog('app');\n\nfunction App() {\n  const stats = log.level >= log.INFO ? <FPSStats left=\"auto\" right=\"0\" /> : '';\n\n  return (\n    <div className=\"container\">\n      <GitHubCorner url=\"https://github.com/taktran/joy-joy\" />\n      {stats}\n      <section className=\"main\">\n        <header>\n          <h1>Joy Joy demo</h1>\n          <h4>\n            A <a href=\"https://en.wikipedia.org/wiki/Joy-Con\">Joy-Con</a> game\n            controller library for the browser\n          </h4>\n        </header>\n\n        <GamepadList />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}